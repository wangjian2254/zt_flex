<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*" borderVisible="false" backgroundAlpha="0" width="900" height="300" xmlns:uicontrol="uicontrol.*" >
	<control:layout>
		<s:BasicLayout/>
	</control:layout>
	<fx:Script>
		<![CDATA[
			import events.ChangeMenuEvent;
			import events.CloseEvent;
			
			import flash.net.navigateToURL;
			
			import httpcontrol.RemoteUtil;
			
			import json.JParser;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumnGroup;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.components.CheckBox;
			
			import util.DateUtil;
			import util.InfoUtil;
			[Bindable]
			public var showLabel:String;
			
			override public function init(e:FlexEvent):void{
				
//				query.addEventListener(CollectionEvent.COLLECTION_CHANGE,queryChanged);
			}
			
			override public function closeContainer(e:CloseEvent):void{
				dispatchEvent(e);
				
			}
			
			
		
//					grid.invalidateList();
			

			
			public function orderRuningRefresh():void{
				var ddbhid:Number=0;
				var ddbhstr:String =null;
				if(ddbhGrid.text!=""&&ddbhGrid.text!=null){
					ddbhstr=ddbhGrid.text;
				}
				if(ddbhGrid.selectedItem==null){
					ddbhid=0;
				}else{
					ddbhid = ddbhGrid.selectedItem.id;
				}
				
				
				
				var myDateFormatter:DateFormatter=new DateFormatter();
				myDateFormatter.formatString="YYYYMMDD";
				if((startdate.selectedDate==null||enddate.selectedDate==null)&&(ddbhid==0&&!ddbhstr)){
					Alert.show("订单下达日期必须选择,或者订单号查询","提示");
					return;
				}
				var start:String=myDateFormatter.format(startdate.selectedDate);	
				var end:String=myDateFormatter.format(enddate.selectedDate);
//				var open:String="close";
//				if(cbopen.selected){
//					open="open";
//				}
				
				var op:AbstractOperation=RemoteUtil.getOperation("getOrderRuningList");
				op.addEventListener(ResultEvent.RESULT,resultOrderRuningList);
				RemoteUtil.openLoading();
				if(ddbhid!=0){
					op.send(start,end,ddbhid);
				}else if(ddbhstr){
					op.send(start,end,ddbhstr);
				}else{
					op.send(start,end);
				}
				
			}
			
			public function resultOrderRuningList(e:ResultEvent):void{
				var today:Number=(new Date()).valueOf();
				
				if(e.result.success){
					var ddbhlist:ArrayCollection=new ArrayCollection();
					var openddbhlist:ArrayCollection=new ArrayCollection();
					queryfilter.removeAll();
					query.removeAll();
					
					query = new ArrayCollection(e.result.result as Array);
					query.filterFunction=closeFilterChanged;
					var item:Object=null;
					for(var i:Number=0;i<query.length;i++){
						item = query.getItemAt(i);
						if(item['closeflag']==0){
							item['opentime']= int((today-DateField.stringToDate(item['xddate'],"YYYY/MM/DD").valueOf())/ 24 / 60 / 60 /1000);
							openddbhlist.addItem(item);
						}else{
							ddbhlist.addItem(item);
						}
					}
					if(ddbhlist.length>0||openddbhlist.length>0){
						
						resultAjax=0;
						needAjax=ddbhlist.length+openddbhlist.length;
						queryreset();
						jisuanOpentime(ddbhlist);
						jisuanCloseNum(openddbhlist);
					}else{
						refreshData();
					}
					
				}
			}
			
			public function closeFilterChanged(item:Object):Boolean{ 
				
				if(cbopen.selected){
					if(item['closeflag']==0){
						return true;
					}else{
						return false
					}
				}else{
					if(item['closeflag']==1){
						return true;
					}else{
						return false
					}
				}
					
			} 
			
			
			private function refreshData():void{
				query.refresh();
				queryfilter.removeAll();
				queryfilter.addAll(query);
				grid.invalidateList();
				
				
			}
//			private function queryChanged(e:CollectionEvent):void{
//				if(e.kind!=CollectionEventKind.REFRESH){
//					return;
//				}
//				
//			}
			
			private var resultAjaxClose:Number=0;
			private var needAjaxClose:Number=0;
			private function jisuanCloseNum(arr:ArrayCollection):void{
				
				var myDateFormatter:DateFormatter=new DateFormatter();
				myDateFormatter.formatString="YYYYMMDD";
				for each(var item:Object in arr){
					var op:AbstractOperation=RemoteUtil.getOperationByProgressBar("getOrderGenZongByDate");
					op.addEventListener(ResultEvent.RESULT,resultJisuanClose);
					var ddbh:Array=new Array();
					ddbh.push(item.id);
					op.send(myDateFormatter.format(new Date()),"open",ddbh,null,true);
				}
			}
			public function resultJisuanClose(e:ResultEvent):void{
				
				if(e.result.success){
					var q:ArrayCollection=new ArrayCollection(e.result.result.query as Array);
					var ddbh_id:Number=0;
					var queryitem:Object=null;
					for each(var item:Object in q){
						ddbh_id=item.ddbh_id;
						if(item.ddwczt=="1"){
							if(queryitem==null){
								for each(var item2:Object in query){
									if(item2.id==ddbh_id){
										queryitem=item2;
									}
								}
							}
							queryitem.closeorderlistnum++;
							queryitem.openorderlistnum--;
						}
					}
					if(queryitem!=null&&queryitem.openorderlistnum==0){
						queryitem['closeflag']=1;
					}	
						
					grid.invalidateList();
				}
				post_request();
			}
			
			public function jisuanOpentime(ids:ArrayCollection):void{
				
				
				for(var i:Number=0;i<ids.length;i++){
				
					var op:AbstractOperation=RemoteUtil.getOperationByProgressBar("getOrderEndDate");
					op.addEventListener(ResultEvent.RESULT,resultZYOrder);
					op.addEventListener(FaultEvent.FAULT,faultZYOrder);
					//						RemoteUtil.openLoading();
					op.send(ids.getItemAt(i)["id"]);
				}
				
			}
			
			public function faultZYOrder(e:FaultEvent):void{
				
				post_request();
				faultAjax++;
			}
			
			public function resultZYOrder(e:ResultEvent):void{
				
				if(e.result.success){
					var ddbhid:Number=e.result.result.ddbhid;
					var date:Date=e.result.result.date;
					var item:Object=null;
					for(var i:Number=0;i<query.length;i++){
						item = query.getItemAt(i);
						if(item['id']==ddbhid){
							item['opentime']= int((date.valueOf()-DateField.stringToDate(item['xddate'],"YYYY/MM/DD").valueOf())/ 24 / 60 / 60 /1000);
							break;
						}
					}
					
				}
				post_request();			}
			
			private var resultAjax:Number=0;
			private var needAjax:Number=0;
			private var faultAjax:Number=0;
			public function post_request():void
			{
				resultAjax++;
				bar.setProgress(resultAjax-1, needAjax);
				var percent:Number = (resultAjax*100/needAjax);
				bar.label = percent.toString().split(".")[0] + "%";
				
				if(needAjax==(resultAjax-1)&&needAjax>0){
					bar.visible=false;
					bar.label="0%";
					refreshData();
				}
			}
			
			
			public function queryreset():void{
				if(needAjax==0){
					needAjax=100;
				}
				bar.visible=true;
				post_request();
				
			}
			
			public function setDateRange(type:String):void{
				var end:Date=new Date();
				var start:Date=new Date();
				switch(type){
					case "oneweek":
						start.date-=7;
						break;
					case "twoweek":
						start.date-=14;
						break;
					case "onemonth":
						start.date-=31;
						break;
					case "twomonth":
						start.date-=62;
						break;
				}
				startdate.selectedDate=start;
				enddate.selectedDate=end;
				
				queryparamchange(true);
				
			}
			
			private function queryparamchange(f:Boolean):void{
				if(f){
//					ddbhGrid.selectedItem=null;
					ddbhGrid.setValue("");
				}else{
					startdate.selectedDate=null;
					enddate.selectedDate=null;
				}
			}
			
			
//			public function getDataStr(item:Object, column:AdvancedDataGridColumn):String{
//				if(item.xddate==""){
//					return "";
//				}
//				var date:Date=item.xddate;
//				return ""+date.fullYear+"/"+(date.month+1)+"/"+date.date;
//			}
			
			public function gotoMonitorView():void{
				var obj:Object=null;
				for each(var item:Object in InfoUtil.orderbhList){
					if(item.ddbh==grid.selectedItem.ddbh){
						obj = item;
						break;
					}
				}
				var param:Object=new Object();
				param["ddbh"]=obj;
				param["isopen"]="1";
//				if(cbclose.selected){
//					param["isopen"]="0";
//				}
				
				var evt:ChangeMenuEvent=new ChangeMenuEvent(ChangeMenuEvent.ChangeMenu_EventStr,"ordermonitor",param,true)
				dispatchEvent(evt);
			}
			
			public function getExcel():void{
				
				var myDateFormatter:DateFormatter=new DateFormatter();
				myDateFormatter.formatString="YYYYMMDD";
				
				var param:Object=new Object();
				param['index']=new Array();
				param['head']=new Object();
				param['data']=queryfilter;
				var c:AdvancedDataGridColumn;
				for(var i:int=0;i<grid.groupedColumns.length;i++){
					c=grid.groupedColumns[i] as AdvancedDataGridColumn;
					param['index'].push(c.dataField);
					param['head'][c.dataField]=c.headerText;
				}
				
				param['excelname']="订单执行情况汇总表-"+myDateFormatter.format(new Date());
				param['sheetname']="订单执行情况汇总表";
				
				var request:URLRequest = new URLRequest("/zt/getExcelByData");
				request.method="post";
				request.data=JParser.encode(param);
				navigateToURL(request);
			}
			
			
			[Bindable]
			public var doflag:Boolean=false;
			
			[Bindable]
			public var query:ArrayCollection=new ArrayCollection();
			[Bindable]
			public var queryfilter:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var orderisopenlist:ArrayCollection=new ArrayCollection();
			
			[Bindable]
			public var orderbb:ArrayCollection=new ArrayCollection();
			
			
			public var orderAndCodeMap:Object=new Object();
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RadioButtonGroup id="ddquerytype" change="refreshData()" >
			
		</s:RadioButtonGroup>
	</fx:Declarations>
	<s:HGroup top="8" right="8" bottom="8" left="8" gap="7">
		
		<s:BorderContainer width="100%" height="100%"  borderVisible="false" color="0x333333" skinClass="skins.contentBoxSkin">	
			<s:layout>
				<s:VerticalLayout gap="5" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
					
				</s:VerticalLayout>
			</s:layout>
			<s:BorderContainer left="0" top="0" height="45" width="100%" borderVisible="false" backgroundImage="{CBorderContainer.toolbgimg}">
				<s:layout>
					<s:HorizontalLayout gap="10" verticalAlign="middle" paddingLeft="20">
						
					</s:HorizontalLayout>
				</s:layout>
				
				
				<s:Label text="模糊订单号:">
				</s:Label>
				<uicontrol:FliterComboBox id="ddbhGrid" dataProvider="{InfoUtil.orderbhList}" labelField="ddbh" valueField="id" width="100" styleName="fliterComboBox" dropdownWidth="200" change="queryparamchange(false)">
					
				</uicontrol:FliterComboBox>
				<s:Label text="下达日期:">
				</s:Label>
				<mx:DateField id="startdate" formatString="YYYY/MM/DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="queryparamchange(true)" />
				<s:Label text="~"/>
				<mx:DateField id="enddate"  formatString="YYYY/MM/DD" dayNames="{DateUtil.dayNames}" monthNames="{DateUtil.monthNames}" change="queryparamchange(true)"/>
				<s:Button label="一周内" click="setDateRange('oneweek');">
				</s:Button>
				<s:Button label="两周内" click="setDateRange('twoweek');">
				</s:Button>
				<s:Button label="一月内" click="setDateRange('onemonth');">
				</s:Button>
				<s:Button label="两月内" click="setDateRange('twomonth');">
				</s:Button>
				<s:Button label="查询" click="orderRuningRefresh()">
				</s:Button>
				<s:BorderContainer width="90" height="100%" backgroundAlpha="0" borderVisible="false">
					<s:layout>
						<s:VerticalLayout verticalAlign="middle">
							
						</s:VerticalLayout>
					</s:layout>
					<s:RadioButton id="cbclose"  group="{ddquerytype}" label="已完成订单" />
					<s:RadioButton id="cbopen" group="{ddquerytype}"  label="未完成订单"  selected="true" />
				</s:BorderContainer>
				<s:Button label="导出数据" click="getExcel()">
				</s:Button>
				
			</s:BorderContainer>
			
					<mx:AdvancedDataGrid id="grid" dataProvider="{query}" doubleClickEnabled="true" itemDoubleClick="gotoMonitorView()" editable="false" width="100%" height="100%">
						<mx:groupedColumns >
							
							<mx:AdvancedDataGridColumn headerText="订单号" dataField="ddbh" width="120">
							</mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="下达日期" dataField="xddate" width="100"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="项数" dataField="orderlistnum" width="60"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="件数" dataField="productnum" width="60"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="已完成项数" dataField="closeorderlistnum" width="120"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="未完成项数" dataField="openorderlistnum" width="120"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="关闭标记" dataField="closeflag" width="120"></mx:AdvancedDataGridColumn>
							<mx:AdvancedDataGridColumn headerText="未关闭时间" dataField="opentime" width="120"></mx:AdvancedDataGridColumn>
						</mx:groupedColumns>
					</mx:AdvancedDataGrid>	
				
			
			
		</s:BorderContainer>
	</s:HGroup>
	<uicontrol:CProgressBar id="bar" width="100%" height="100%" visible="false">
	</uicontrol:CProgressBar>
</control:CBorderContainer>
